package com.wxr.datastruct;

/**
 * @Auther: wuxinru
 * @Date: 2022-08-07 - 08 - 07 - 13:10
 * @Description: com.wxr.datastruct
 * @version: 1.0
 */

/*题目：给定一个函数f1可以实现1-5范围内的等概率，
        通过这个函数而不使用别的函数实现1-7内等概率函数返回
  分析：f1-实现1-5等概率返回
        f2-(0,1)发生器——1-2返回0,3重新生成，4-5返回1
        f3-让f2随机生成3次，就可得到0-7，即000-111等概率
        f4-要得到1-7的等概率，即得到0-6等概率
        g(x)-目标函数，即在f4上+1即可。
        */
public class RandomTest {
    public static void main(String[] args) {
        int count[] =new int[8];
        for (int i = 0; i < 10000; i++) {
            int num = g();
            count[num]++;
        }
        for (int i = 1; i <8 ; i++) {
            double p = count[i]/10000.0;
            System.out.println(i+"出现"+count[i]+"次"+"概率是"+p);
        }
    }
    
    //f1-实现1-5等概率返回
    public static  int f1(){
//        Math.random()是double [0,1)的随机数,*5再随机取整-->[0,4)-->[1,5)
        return (int)(Math.random()*5)+1;
    }
//    f2-(0,1)发生器——1-2返回0,3重新生成，4-5返回1
    public static  int f2(){
        int as = 0;
        do{
          as = f1();
        }while(as==3);
        return as<3 ? 0 : 1;
    }
//    f3-让f2随机生成3次，就可得到0-7，即000-111等概率
    public static int f3(){
         return (f2() << 2) + (f2() << 1) + f2();
    }
//    f4-要得到1-7的等概率，即得到0-6等概率
    public static int f4(){
        int as = 0;
        do{
            as = f3();
        }while (as==7);
        return as;
    }
//    g(x)-目标函数，即在f4上+1即可。
    public static int g(){
        return f4()+1;
    }
}
